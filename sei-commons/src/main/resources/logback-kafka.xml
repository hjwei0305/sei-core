<?xml version="1.0" encoding="UTF-8"?>
<configuration>

    <include resource="logback-default.xml" />
    <include resource="logback-console.xml" />

    <!-- 读取当前应用Environment中的属性. 读取application.yml中的值 -->
    <springProperty scope="context" name="bootstrapServers" source="spring.kafka.bootstrap-servers" defaultValue="localhost:9092"/>
    <springProperty scope="context" name="logTopic" source="spring.kafka.logger-topic" defaultValue="SeiLoggerPlatform"/>
<!--    <springProperty scope="context" name="IP" source="spring.cloud.client.ipAddress" />-->

    <!-- kafka的appender配置 -->
    <appender name="kafkaAppender" class="com.changhong.sei.core.log.extend.SeiKafkaAppender">
        <encoder charset="UTF-8" class="net.logstash.logback.encoder.LoggingEventCompositeJsonEncoder">
            <providers>
                <timestamp>
                    <timeZone>UTC</timeZone>
                </timestamp>
                <pattern>
                    <pattern>
                        {
                        "timestamp": "%d{yyyy-MM-dd'T'HH:mm:ss.SSSZ}",

                        "seiVersion": "sei-${sei-version:-}",
                        "traceId": "%X{traceId:-}",
                        "tracePath": "%X{tracePath:-}",
                        "userId": "%X{userId:-}",
                        "account": "%X{account:-}",
                        "userName": "%X{userName:-}",
                        "className": "%X{className:-}",
                        "methodName": "%X{methodName:-}",
                        "args": "%X{args:-}",

                        "requestURI": "%X{requestURI:-}",
                        "queryString": "%X{queryString:-}",
                        "userAgent": "%X{userAgent:-}",

                        "host": "${HOSTNAME:-}",
                        "env": "${ENV:-}",
                        "serviceName": "${APP_NAME}",

                        "pid": "${PID:- }",
                        "logger": "%logger",
                        "level": "%p",
                        "message": "%msg",
                        "stackTrace": "%ex"
                        }
                    </pattern>
                </pattern>
            </providers>
        </encoder>
        <topic>${logTopic}</topic>
<!--        &lt;!&ndash; we don't care how the log messages will be partitioned  &ndash;&gt;-->
<!--        <keyingStrategy class="com.github.danielwegener.logback.kafka.keying.NoKeyKeyingStrategy" />-->

<!--        &lt;!&ndash; use async delivery. the application threads are not blocked by logging &ndash;&gt;-->
<!--        <deliveryStrategy class="com.github.danielwegener.logback.kafka.delivery.AsynchronousDeliveryStrategy" />-->

        <!-- ensure that every message sent by the executing host is partitioned to the same partition strategy -->
        <keyingStrategy class="com.github.danielwegener.logback.kafka.keying.HostNameKeyingStrategy" />
        <!-- block the logging application thread if the kafka appender cannot keep up with sending the log messages -->
        <deliveryStrategy class="com.github.danielwegener.logback.kafka.delivery.BlockingDeliveryStrategy">
            <!-- wait indefinitely until the kafka producer was able to send the message -->
            <timeout>0</timeout>
        </deliveryStrategy>

        <!-- each <producerConfig> translates to regular kafka-client config (format: key=value) -->
        <!-- producer configs are documented here: https://kafka.apache.org/documentation.html#newproducerconfigs -->
        <!-- bootstrap.servers is the only mandatory producerConfig -->
        <producerConfig>bootstrap.servers=${bootstrapServers}</producerConfig>
        <!-- restrict the size of the buffered batches to 8MB (default is 32MB) -->
        <producerConfig>buffer.memory=8388608</producerConfig>
        <!-- If the kafka broker is not online when we try to log, just block until it becomes available -->
        <producerConfig>metadata.fetch.timeout.ms=99999999999</producerConfig>
        <!-- use gzip to compress each batch of log messages. valid values: none, gzip, snappy  -->
        <producerConfig>compression.type=gzip</producerConfig>

        <!-- don't wait for a broker to ack the reception of a batch.  -->
<!--        <producerConfig>acks=0</producerConfig>-->
        <!-- wait up to 1000ms and collect log messages before sending them as a batch -->
<!--        <producerConfig>linger.ms=1000</producerConfig>-->
        <!-- even if the producer buffer runs full, do not block the application but start to drop messages -->
<!--        <producerConfig>max.block.ms=0</producerConfig>-->
        <!-- define a client-id that you use to identify yourself against the kafka broker -->
        <producerConfig>client.id=${HOSTNAME}-${CONTEXT_NAME}-logback-relaxed</producerConfig>

        <!-- Log every log message that could not be sent to kafka to STDERR -->
        <appender-ref ref="CONSOLE"/>
    </appender>

    <appender name="ASYNC" class="ch.qos.logback.classic.AsyncAppender">
        <appender-ref ref="kafkaAppender" />
    </appender>


    <!-- 日志输出级别 -->
    <root level="DEBUG">
        <appender-ref ref="CONSOLE"/>

        <appender-ref ref="ASYNC"/>
    </root>

</configuration>
